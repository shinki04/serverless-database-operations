AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Serverless Database Operations with RDS Proxy, Lambda, ElastiCache, and Lambda Layer

Parameters:
  DBInstanceIdentifierName:
    Type: String
    Description: The name (DB Instance Identifier) of the RDS instance.
    Default: rdsmysql
    MinLength: 5

  MasterUsernameDB:
    Type: String
    Description: Master username for db instance
    Default: admin

  MasterUserPasswordDB:
    NoEcho: true
    Type: String
    Description: Master password for db instance
    # Default: xinchaothegioi123
    MinLength: 1

  DBNameInit:
    Type: String
    Description: Database name init
    Default: shopdemo
    MinLength: 1

  UserNameValkey:
    Type: String
    Description: Username for Valkey
    Default: valkey-user
    MinLength: 1

  PasswordsValkey1:
    NoEcho: true
    Type: String
    Description: Password for Valkey Cache
    # Default: m@tkhauelasticache123
    MinLength: 1

  PasswordsValkey2:
    NoEcho: true
    Type: String
    Description: Password for Valkey Cache 2
    # Default: m@tkhauelasticache456
    MinLength: 1

  UserGroupIdValkeyCache:
    Type: String
    Description: UserGroupId for Valkey
    Default: valkey-user-group
    MinLength: 1

  ServerlessDBValkeyCacheName:
    Type: String
    Description: ServerlessCacheName for Valkey
    Default: ServerlessDBValkeyCache
    MinLength: 1

  ProxyName:
    Type: String
    Description: ProxyName for RDS
    Default: ServerlessDBProxy
    MinLength: 1

  INSTANCE_TYPES_VARIABLE:
    Type: String
    Description: A list of allowed instance types, separated by commas.
    default: db.t3.micro,db.t4g.micro,db.t4g.medium,db.m5.large 
    
Resources:
  # Common IAM Managed Policy for Lambda Functions
  CommonLambdaPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ServerlessDB*:*
          - Effect: Allow
            Action:
              - ec2:CreateNetworkInterface
              - ec2:DeleteNetworkInterface
              - ec2:DescribeNetworkInterfaces
              - ec2:DescribeSecurityGroups
              - ec2:DescribeSubnets
              - ec2:DescribeVpcs
            Resource: "*"

  # Lambda Layer for Python dependencies
  ServerlessDBPythonLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: ServerlessDBPythonDependencies
      Description: Python dependencies for Lambda functions (mysql-connector-python, redis, requests)
      ContentUri: layer/
      CompatibleRuntimes:
        - python3.11
      RetentionPolicy: Retain

  # VPC Configuration
  ServerlessDBVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: ServerlessDBVPC

  # Private Subnets
  ServerlessDBPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ServerlessDBVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: ap-southeast-1a
      Tags:
        - Key: Name
          Value: RDS-Serverless-subnet-private1-ap-southeast-1a

  ServerlessDBPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ServerlessDBVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: ap-southeast-1b
      Tags:
        - Key: Name
          Value: RDS-Serverless-subnet-private2-ap-southeast-1b

  ServerlessDBPrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ServerlessDBVPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: ap-southeast-1c
      Tags:
        - Key: Name
          Value: RDS-Serverless-subnet-private3-ap-southeast-1c

  # Public Subnet
  ServerlessDBPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ServerlessDBVPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: ap-southeast-1a
      Tags:
        - Key: Name
          Value: ServerlessDB-subnet-public-ap-southeast-1a

  # Route Tables
  ServerlessDBPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ServerlessDBVPC
      Tags:
        - Key: Name
          Value: ServerlessDBPrivateRouteTable

  ServerlessDBPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ServerlessDBVPC
      Tags:
        - Key: Name
          Value: ServerlessDBPublicRouteTable

  # Internet Gateway
  ServerlessDBInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: ServerlessDBInternetGateway

  ServerlessDBVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref ServerlessDBVPC
      InternetGatewayId: !Ref ServerlessDBInternetGateway

  # Route for Public Subnet
  ServerlessDBPublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref ServerlessDBPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref ServerlessDBInternetGateway

  # Subnet Associations
  ServerlessDBPrivateSubnet1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ServerlessDBPrivateSubnet1
      RouteTableId: !Ref ServerlessDBPrivateRouteTable

  ServerlessDBPrivateSubnet2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ServerlessDBPrivateSubnet2
      RouteTableId: !Ref ServerlessDBPrivateRouteTable

  ServerlessDBPrivateSubnet3Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ServerlessDBPrivateSubnet3
      RouteTableId: !Ref ServerlessDBPrivateRouteTable

  ServerlessDBPublicSubnetAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ServerlessDBPublicSubnet
      RouteTableId: !Ref ServerlessDBPublicRouteTable

  # Security Groups
  ServerlessDBRDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for RDS
      VpcId: !Ref ServerlessDBVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref ServerlessDBRDSProxySecurityGroup
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: rds-security-group

  ServerlessDBCacheSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ElastiCache
      VpcId: !Ref ServerlessDBVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          SourceSecurityGroupId: !Ref ServerlessDBLambdaSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: cache-security-group

  ServerlessDBLambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Lambda
      VpcId: !Ref ServerlessDBVPC
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: lambda-security-group

  ServerlessDBEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for VPC Endpoints
      VpcId: !Ref ServerlessDBVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref ServerlessDBLambdaSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: Endpoint-SG

  ServerlessDBRDSProxySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for RDS Proxy
      VpcId: !Ref ServerlessDBVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref ServerlessDBLambdaSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
        # - IpProtocol: tcp
        #   FromPort: 3306
        #   ToPort: 3306
        #   DestinationSecurityGroupId: !Ref ServerlessDBRDSSecurityGroup
      Tags:
        - Key: Name
          Value: rds-proxy-security-group

  # VPC Endpoints
  ServerlessDBSecretsManagerEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.secretsmanager
      VpcId: !Ref ServerlessDBVPC
      SubnetIds:
        - !Ref ServerlessDBPrivateSubnet1
        - !Ref ServerlessDBPrivateSubnet2
        - !Ref ServerlessDBPrivateSubnet3
      SecurityGroupIds:
        - !Ref ServerlessDBEndpointSecurityGroup
      VpcEndpointType: Interface
      PrivateDnsEnabled: true

  ServerlessDBRDSEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.rds
      VpcId: !Ref ServerlessDBVPC
      SubnetIds:
        - !Ref ServerlessDBPrivateSubnet1
        - !Ref ServerlessDBPrivateSubnet2
        - !Ref ServerlessDBPrivateSubnet3
      SecurityGroupIds:
        - !Ref ServerlessDBEndpointSecurityGroup
      VpcEndpointType: Interface
      PrivateDnsEnabled: true

  ServerlessDBLogsEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.logs
      VpcId: !Ref ServerlessDBVPC
      SubnetIds:
        - !Ref ServerlessDBPrivateSubnet1
        - !Ref ServerlessDBPrivateSubnet2
        - !Ref ServerlessDBPrivateSubnet3
      SecurityGroupIds:
        - !Ref ServerlessDBEndpointSecurityGroup
      VpcEndpointType: Interface
      PrivateDnsEnabled: true

  # RDS Subnet Group
  ServerlessDBRDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS
      SubnetIds:
        - !Ref ServerlessDBPrivateSubnet1
        - !Ref ServerlessDBPrivateSubnet2
        - !Ref ServerlessDBPrivateSubnet3
      Tags:
        - Key: Name
          Value: ServerlessDBRDSSubnetGroup

  # RDS Instance
  ServerlessDBRDSInstance:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Delete
    Properties:
      DBInstanceIdentifier: !Ref DBInstanceIdentifierName
      Engine: mysql
      EngineVersion: 8.0.42
      DBInstanceClass: db.t3.micro
      AllocatedStorage: 20
      StorageType: gp3
      MaxAllocatedStorage: 1000
      MasterUsername: !Ref MasterUsernameDB
      MasterUserPassword: !Ref MasterUserPasswordDB
      DBName: !Ref DBNameInit
      MultiAZ: true
      DBSubnetGroupName: !Ref ServerlessDBRDSSubnetGroup
      VPCSecurityGroups:
        - !Ref ServerlessDBRDSSecurityGroup
      BackupRetentionPeriod: 7
      AutoMinorVersionUpgrade: true
      DeleteAutomatedBackups: true
      Tags:
        - Key: Name
          Value: ServerlessDBRDSInstance

  # Secrets Manager Secret
  ServerlessDBRDSSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: rds-proxy-secret
      Description: Credentials for RDS database
      SecretString: !Sub '{"username":"${MasterUsernameDB}","password":"${MasterUserPasswordDB}","dbname":"${DBNameInit}"}'
      Tags:
        - Key: Name
          Value: ServerlessDBRDSSecret

  # RDS Proxy
  ServerlessDBRDSProxy:
    Type: AWS::RDS::DBProxy
    Properties:
      DBProxyName: !Ref ProxyName
      EngineFamily: MYSQL
      Auth:
        - AuthScheme: SECRETS
          SecretArn: !Ref ServerlessDBRDSSecret
          IAMAuth: REQUIRED
      RoleArn: !GetAtt ServerlessDBRDSProxyRole.Arn
      VpcSubnetIds:
        - !Ref ServerlessDBPrivateSubnet1
        - !Ref ServerlessDBPrivateSubnet2
        - !Ref ServerlessDBPrivateSubnet3
      VpcSecurityGroupIds:
        - !Ref ServerlessDBRDSProxySecurityGroup
      IdleClientTimeout: 60
      RequireTLS: true
      DebugLogging: true

  ServerlessDBRDSProxyTargetGroup:
    Type: AWS::RDS::DBProxyTargetGroup
    Properties:
      DBProxyName: !Ref ServerlessDBRDSProxy
      TargetGroupName: default
      DBInstanceIdentifiers:
        - !Ref ServerlessDBRDSInstance
      ConnectionPoolConfigurationInfo:
        MaxConnectionsPercent: 100

  # ElastiCache (Valkey) User and User Group
  ServerlessDBValkeyUser:
    Type: AWS::ElastiCache::User
    Properties:
      UserId: !Ref UserNameValkey
      UserName: !Ref UserNameValkey
      Engine: valkey
      AccessString: "on ~* +@all"
      Passwords:
        - !Ref PasswordsValkey1
        - !Ref PasswordsValkey2

  ServerlessDBValkeyUserGroup:
    Type: AWS::ElastiCache::UserGroup
    Properties:
      UserGroupId: !Ref UserGroupIdValkeyCache
      Engine: valkey
      UserIds:
        - !Ref ServerlessDBValkeyUser

  # ElastiCache (Valkey) Serverless
  ServerlessDBValkeyCache:
    Type: AWS::ElastiCache::ServerlessCache
    DeletionPolicy: Delete
    Properties:
      CacheUsageLimits:
        DataStorage:
          Maximum: 100
          Minimum: 0
          Unit: GB
        ECPUPerSecond:
          Maximum: 100000
      UserGroupId: !Ref ServerlessDBValkeyUserGroup
      Engine: valkey
      ServerlessCacheName: !Ref ServerlessDBValkeyCacheName
      SubnetIds:
        - !Ref ServerlessDBPrivateSubnet1
        - !Ref ServerlessDBPrivateSubnet2
        - !Ref ServerlessDBPrivateSubnet3
      SecurityGroupIds:
        - !Ref ServerlessDBCacheSecurityGroup
      DailySnapshotTime: "00:00"
      SnapshotRetentionLimit: 7
      Tags:
        - Key: Name
          Value: ServerlessDBValkeyCache

  # IAM Roles and Policies
  ServerlessDBRDSProxyRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: rds.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: RDSSecretsAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: GetSecretValue
                Effect: Allow
                Action:
                  - secretsmanager:GetResourcePolicy
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                  - secretsmanager:ListSecretVersionIds
                Resource: !Ref ServerlessDBRDSSecret
              - Sid: DecryptSecretValue
                Effect: Allow
                Action: kms:Decrypt
                Resource: !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/*

  ServerlessDBLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Ref CommonLambdaPolicy
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: elasticache:Connect
                Resource:
                  - !Sub arn:aws:elasticache:${AWS::Region}:${AWS::AccountId}:serverlesscache:${ServerlessDBValkeyCacheName}
                  - !Sub arn:aws:elasticache:${AWS::Region}:${AWS::AccountId}:user:*
              - Effect: Allow
                Action: rds-db:connect
                Resource: !Sub
                  - "arn:aws:rds-db:${AWS::Region}:${AWS::AccountId}:dbuser:${ProxyResourceId}/*"
                  - ProxyResourceId:
                      !Select [
                        6,
                        !Split [":", !GetAtt ServerlessDBRDSProxy.DBProxyArn],
                      ]
              - Effect: Allow
                Action: secretsmanager:GetSecretValue
                Resource: !Ref ServerlessDBRDSSecret

  ServerlessDBLambdaCPUScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Ref CommonLambdaPolicy
      Policies:
        - PolicyName: CPUScalingPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - rds:DescribeDBInstances
                  - rds:ModifyDBInstance
                Resource: !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:db:${DBInstanceIdentifierName}
              - Effect: Allow
                Action:
                  - cloudwatch:DescribeAlarms
                  - cloudwatch:PutMetricAlarm
                Resource: "*"
              - Effect: Allow
                Action:
                  - sns:Publish
                  - sns:Subscribe
                  - sns:Unsubscribe
                  - sns:ListSubscriptionsByTopic
                Resource: !Ref ServerlessDBSNSTopic

  # SNS Topic for CPU Scaling
  ServerlessDBSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: ServerlessDBSNSCPUScaler
      Tags:
        - Key: Name
          Value: ServerlessDBSNSTopic

  # CloudWatch Alarms
  ServerlessDBCPUHighAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: ServerlessDBCPUHighAlarm
      AlarmDescription: Alarm when CPU exceeds 60%
      MetricName: CPUUtilization
      Namespace: AWS/RDS
      Statistic: Average
      Period: 60
      EvaluationPeriods: 2
      Threshold: 60.0
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: DBInstanceIdentifier
          Value: !Ref DBInstanceIdentifierName
      AlarmActions:
        - !Ref ServerlessDBSNSTopic

  ServerlessDBCPULowAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: ServerlessDBCPULowAlarm
      AlarmDescription: Alarm when CPU is below 60%
      MetricName: CPUUtilization
      Namespace: AWS/RDS
      Statistic: Average
      Period: 60
      EvaluationPeriods: 2
      Threshold: 60.0
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: DBInstanceIdentifier
          Value: !Ref DBInstanceIdentifierName
      AlarmActions:
        - !Ref ServerlessDBSNSTopic

  # Lambda Function for CPU Scaling
  ServerlessDBCPUScalerLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ServerlessDBCPUScaler
      Handler: index.lambda_handler
      Runtime: python3.11
      Timeout: 30
      Role: !GetAtt ServerlessDBLambdaCPUScalingRole.Arn
      CodeUri: cpu-scaler/
      Environment:
        Variables:
          INSTANCE_TYPES: !Ref INSTANCE_TYPES_VARIABLE
      Events:
        SNSTrigger:
          Type: SNS
          Properties:
            Topic: !Ref ServerlessDBSNSTopic

  # Lambda Function Permission
  ServerlessDBCPUScalerLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ServerlessDBCPUScalerLambda.Arn
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !GetAtt ServerlessDBSNSTopic.TopicArn

  # Lambda Function for Create Table
  ServerlessDBCreateTableLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ServerlessDBCreateTable
      Handler: index.lambda_handler
      Runtime: python3.11
      Timeout: 30
      Role: !GetAtt ServerlessDBLambdaExecutionRole.Arn
      CodeUri: create-table/
      Layers:
        - !Ref ServerlessDBPythonLayer
      VpcConfig:
        SubnetIds:
          - !Ref ServerlessDBPrivateSubnet1
          - !Ref ServerlessDBPrivateSubnet2
          - !Ref ServerlessDBPrivateSubnet3
        SecurityGroupIds:
          - !Ref ServerlessDBLambdaSecurityGroup
      Environment:
        Variables:
          PROXY_ENDPOINT: !GetAtt ServerlessDBRDSProxy.Endpoint
          VALKEY_PRIMARY_ENDPOINT: !GetAtt ServerlessDBValkeyCache.Endpoint.Address
          VALKEY_USER_NAME: !Ref UserNameValkey
          VALKEY_PASSWORD: !Ref PasswordsValkey1
          DB_NAME: !Ref DBNameInit
          DB_USER: !Ref MasterUsernameDB
      Events:
        Api:
          Type: Api
          Properties:
            Path: /create-table
            Method: POST

  # Lambda Function for Insert Bulk Orders
  ServerlessDBInsertBulkOrdersLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ServerlessDBInsertBulkOrders
      Handler: index.lambda_handler
      Runtime: python3.11
      Timeout: 30
      Role: !GetAtt ServerlessDBLambdaExecutionRole.Arn
      CodeUri: insert-bulk/
      Layers:
        - !Ref ServerlessDBPythonLayer
      VpcConfig:
        SubnetIds:
          - !Ref ServerlessDBPrivateSubnet1
          - !Ref ServerlessDBPrivateSubnet2
          - !Ref ServerlessDBPrivateSubnet3
        SecurityGroupIds:
          - !Ref ServerlessDBLambdaSecurityGroup
      Environment:
        Variables:
          PROXY_ENDPOINT: !GetAtt ServerlessDBRDSProxy.Endpoint
          VALKEY_PRIMARY_ENDPOINT: !GetAtt ServerlessDBValkeyCache.Endpoint.Address
          VALKEY_USER_NAME: !Ref UserNameValkey
          VALKEY_PASSWORD: !Ref PasswordsValkey1
          DB_NAME: !Ref DBNameInit
          DB_USER: !Ref MasterUsernameDB
      Events:
        Api:
          Type: Api
          Properties:
            Path: /insert-bulk
            Method: POST

  # Lambda Function for CRUD Operations
  ServerlessDBCRUDOperationsLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ServerlessDBCRUDOperations
      Handler: index.lambda_handler
      Runtime: python3.11
      Timeout: 30
      Role: !GetAtt ServerlessDBLambdaExecutionRole.Arn
      CodeUri: crud-operations/
      Layers:
        - !Ref ServerlessDBPythonLayer
      VpcConfig:
        SubnetIds:
          - !Ref ServerlessDBPrivateSubnet1
          - !Ref ServerlessDBPrivateSubnet2
          - !Ref ServerlessDBPrivateSubnet3
        SecurityGroupIds:
          - !Ref ServerlessDBLambdaSecurityGroup
      Environment:
        Variables:
          PROXY_ENDPOINT: !GetAtt ServerlessDBRDSProxy.Endpoint
          VALKEY_PRIMARY_ENDPOINT: !GetAtt ServerlessDBValkeyCache.Endpoint.Address
          VALKEY_USER_NAME: !Ref UserNameValkey
          VALKEY_PASSWORD: !Ref PasswordsValkey1
          DB_NAME: !Ref DBNameInit
          DB_USER: !Ref MasterUsernameDB
      Events:
        GetApi:
          Type: Api
          Properties:
            Path: /orders
            Method: GET
        PostApi:
          Type: Api
          Properties:
            Path: /orders
            Method: POST
        DeleteApi:
          Type: Api
          Properties:
            Path: /orders
            Method: DELETE

  # Lambda Function for Query Operations
  ServerlessDBQueryOperationsLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ServerlessDBQueryOperations
      Handler: index.lambda_handler
      Runtime: python3.11
      Timeout: 30
      Role: !GetAtt ServerlessDBLambdaExecutionRole.Arn
      CodeUri: query-operations/
      Layers:
        - !Ref ServerlessDBPythonLayer
      VpcConfig:
        SubnetIds:
          - !Ref ServerlessDBPrivateSubnet1
          - !Ref ServerlessDBPrivateSubnet2
          - !Ref ServerlessDBPrivateSubnet3
        SecurityGroupIds:
          - !Ref ServerlessDBLambdaSecurityGroup
      Environment:
        Variables:
          PROXY_ENDPOINT: !GetAtt ServerlessDBRDSProxy.Endpoint
          VALKEY_PRIMARY_ENDPOINT: !GetAtt ServerlessDBValkeyCache.Endpoint.Address
          VALKEY_USER_NAME: !Ref UserNameValkey
          VALKEY_PASSWORD: !Ref PasswordsValkey1
          DB_NAME: !Ref DBNameInit
          DB_USER: !Ref MasterUsernameDB
      Events:
        Api:
          Type: Api
          Properties:
            Path: /orders/query
            Method: GET

Outputs:
  ServerlessDBApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod
  ServerlessDBRDSEndpoint:
    Description: RDS Instance Endpoint
    Value: !GetAtt ServerlessDBRDSInstance.Endpoint.Address
  ServerlessDBRDSProxyEndpoint:
    Description: RDS Proxy Endpoint
    Value: !GetAtt ServerlessDBRDSProxy.Endpoint
  ServerlessDBValkeyEndpoint:
    Description: Valkey Cache Endpoint
    Value: !GetAtt ServerlessDBValkeyCache.Endpoint.Address
  ServerlessDBRDSSecretArn:
    Description: Secrets Manager Secret ARN
    Value: !Ref ServerlessDBRDSSecret
  ServerlessDBPythonLayerArn:
    Description: ARN of the Python Lambda Layer
    Value: !Ref ServerlessDBPythonLayer
